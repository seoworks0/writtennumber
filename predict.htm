<!DOCTYPE html>
<!-- saved from url=(0038)https://keras.io/ja/models/sequential/ -->
<html class=" js flexbox flexboxlegacy canvas canvastext webgl no-touch geolocation postmessage websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths" lang="en" style=""><!--<![endif]--><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <title>Sequentialモデル - Keras Documentation</title>
  

  <link rel="shortcut icon" href="https://keras.io/img/favicon.ico">

  
  <link href="./predict_files/css" rel="stylesheet" type="text/css">

  <link rel="stylesheet" href="./predict_files/theme.css" type="text/css">
  <link rel="stylesheet" href="./predict_files/theme_extra.css" type="text/css">
  <link rel="stylesheet" href="./predict_files/highlight.css">

  
  <script async="" src="https://www.google-analytics.com/analytics.js"></script><script>
    // Current page data
    var mkdocs_page_name = "Sequentialモデル";
  </script>
  
  <script src="./predict_files/jquery-2.1.1.min.js"></script>
  <script src="./predict_files/modernizr-2.8.3.min.js"></script>
  <script type="text/javascript" src="./predict_files/highlight.pack.js"></script>
  <script src="./predict_files/theme.js"></script> 

  
  <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-61785484-1', 'keras.io');
      ga('send', 'pageview');
  </script>
  
<style type="text/css" id="eow_sv_style">#sideView_wrapper {
height: 400px;
width: 500px;
border-top: 1px solid #999 !important;
border-left: 1px solid #999 !important;
box-shadow: -1px 2px 2px rgba(0,0,0,0.3) !important;
position: fixed !important;
right: 0px !important;
bottom: 0px !important;
z-index: 2147483646;
}
#sideView_ifr {
border: none !important;
height: 100%;
width: 100%;
}#sideView_wrapper {
position: fixed !important;
left: auto !important;
right: 0px !important;
top: auto !important;
bottom: 0px !important;
}
#sideView_wrapper .ui-resizable-nw {
background-image: url("chrome-extension://oonalfdoahlmjaoloddjenihohbfodme/img/resize-grip-nw.png") !important;
background-repeat: no-repeat !important;
cursor: nw-resize !important;
width: 20px !important;
height: 20px !important;
position: absolute !important;
top: 0px !important;
left: 0px !important;
}sideView_icons
{
padding: 0 !important;
margin: 0 !important;
border-style: none !important;
z-index: 1002 !important
}#pun_ui {
width: 24px;
height: 24px;
position: absolute !important;
left: 7px !important;
top: -2px !important;
z-index: 1005;
}
#pun_ui[ison="true"] {
background-image: url("chrome-extension://oonalfdoahlmjaoloddjenihohbfodme/img/pin_on.png") !important;
}
#pun_ui[ison="false"] {
background-image: url("chrome-extension://oonalfdoahlmjaoloddjenihohbfodme/img/pin_off.png") !important;
}#toggle_header {
width: 24px;
height: 24px;
position: absolute !important;
left: 33px !important;
top: 0px !important;
}
#toggle_header[ison="true"] {
background-image: url("chrome-extension://oonalfdoahlmjaoloddjenihohbfodme/img/openheader.png") !important;
}
#toggle_header[ison="false"] {
background-image: url("chrome-extension://oonalfdoahlmjaoloddjenihohbfodme/img/hideheader.png") !important;
z-index: 1005;
}</style></head>

<body class="wy-body-for-nav" role="document">

  <div class="wy-grid-for-nav">

    
    <nav data-toggle="wy-nav-shift" class="wy-nav-side stickynav">
      <div class="wy-side-nav-search">
        <a href="https://keras.io/ja/" class="icon icon-home"> Keras Documentation</a>
        <div role="search">
  <form id="rtd-search-form" class="wy-form" action="https://keras.io/ja/search.html" method="get">
    <input type="text" name="q" placeholder="Search docs">
  </form>
</div>
      </div>

      <div class="wy-menu wy-menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
        <ul class="current">
          
            <li>
    </li><li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/">Home</a>
        
    </li>
<li>
          
            </li><li>
    </li><li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/why-use-keras/">なぜKerasを使うか?</a>
        
    </li>
<li>
          
            </li><li>
    <ul class="subnav">
    <li><span>初めに</span></li>

        
            
    <li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/getting-started/sequential-model-guide/">Sequentialモデルのガイド</a>
        
    </li>

        
            
    <li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/getting-started/functional-api-guide/">Functional APIのガイド</a>
        
    </li>

        
            
    <li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/getting-started/faq/">FAQ</a>
        
    </li>

        
    </ul>
</li><li>
          
            </li><li>
    <ul class="subnav">
    <li><span>モデル</span></li>

        
            
    <li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/models/about-keras-models/">モデルについて</a>
        
    </li>

        
            
    <li class="toctree-l1 current">
        <a class="current" href="https://keras.io/ja/models/sequential/">Sequentialモデル</a>
        
            <ul>
            
                <li class="toctree-l3"><a href="https://keras.io/ja/models/sequential/#sequentialapi">SequentialモデルAPI</a></li>
                
                    <li><a class="toctree-l4" href="https://keras.io/ja/models/sequential/#_1">モデルの有用な属性</a></li>
                
                    <li><a class="toctree-l4" href="https://keras.io/ja/models/sequential/#sequential">Sequentialモデルのメソッド</a></li>
                
            
            </ul>
        
    </li>

        
            
    <li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/models/model/">Modelクラス (functional API)</a>
        
    </li>

        
    </ul>
</li><li>
          
            </li><li>
    <ul class="subnav">
    <li><span>レイヤー</span></li>

        
            
    <li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/layers/about-keras-layers/">レイヤーについて</a>
        
    </li>

        
            
    <li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/layers/core/">Coreレイヤー</a>
        
    </li>

        
            
    <li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/layers/convolutional/">Convolutionalレイヤー</a>
        
    </li>

        
            
    <li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/layers/pooling/">Poolingレイヤー</a>
        
    </li>

        
            
    <li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/layers/local/">Locally-connectedレイヤー</a>
        
    </li>

        
            
    <li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/layers/recurrent/">Recurrentレイヤー</a>
        
    </li>

        
            
    <li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/layers/embeddings/">Embeddingレイヤー</a>
        
    </li>

        
            
    <li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/layers/merge/">Mergeレイヤー</a>
        
    </li>

        
            
    <li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/layers/advanced-activations/">Advanced Activationsレイヤー</a>
        
    </li>

        
            
    <li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/layers/normalization/">Normalizationレイヤー</a>
        
    </li>

        
            
    <li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/layers/noise/">Noiseレイヤー</a>
        
    </li>

        
            
    <li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/layers/wrappers/">レイヤーラッパー</a>
        
    </li>

        
            
    <li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/layers/writing-your-own-keras-layers/">オリジナルのKerasレイヤーを作成する</a>
        
    </li>

        
    </ul>
</li><li>
          
            </li><li>
    <ul class="subnav">
    <li><span>データの前処理</span></li>

        
            
    <li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/preprocessing/sequence/">シーケンスの前処理</a>
        
    </li>

        
            
    <li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/preprocessing/text/">テキストの前処理</a>
        
    </li>

        
            
    <li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/preprocessing/image/">画像の前処理</a>
        
    </li>

        
    </ul>
</li><li>
          
            </li><li>
    </li><li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/losses/">損失関数</a>
        
    </li>
<li>
          
            </li><li>
    </li><li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/metrics/">評価関数</a>
        
    </li>
<li>
          
            </li><li>
    </li><li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/optimizers/">最適化</a>
        
    </li>
<li>
          
            </li><li>
    </li><li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/activations/">活性化関数</a>
        
    </li>
<li>
          
            </li><li>
    </li><li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/callbacks/">コールバック</a>
        
    </li>
<li>
          
            </li><li>
    </li><li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/datasets/">データセット</a>
        
    </li>
<li>
          
            </li><li>
    </li><li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/applications/">Applications</a>
        
    </li>
<li>
          
            </li><li>
    </li><li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/backend/">バックエンド</a>
        
    </li>
<li>
          
            </li><li>
    </li><li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/initializers/">初期化</a>
        
    </li>
<li>
          
            </li><li>
    </li><li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/regularizers/">正則化</a>
        
    </li>
<li>
          
            </li><li>
    </li><li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/constraints/">制約</a>
        
    </li>
<li>
          
            </li><li>
    </li><li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/visualization/">可視化</a>
        
    </li>
<li>
          
            </li><li>
    </li><li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/scikit-learn-api/">Scikit-learn API</a>
        
    </li>
<li>
          
            </li><li>
    </li><li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/utils/">ユーティリティ</a>
        
    </li>
<li>
          
            </li><li>
    </li><li class="toctree-l1 ">
        <a class="" href="https://keras.io/ja/contributing/">貢献</a>
        
    </li>
<li>
          
        </li></ul>
      </div>
      &nbsp;
    </nav>

    <section data-toggle="wy-nav-shift" class="wy-nav-content-wrap">

      
      <nav class="wy-nav-top" role="navigation" aria-label="top navigation">
        <i data-toggle="wy-nav-top" class="fa fa-bars"></i>
        <a href="https://keras.io/ja/">Keras Documentation</a>
      </nav>

      
      <div class="wy-nav-content">
        <div class="rst-content">
          <div role="navigation" aria-label="breadcrumbs navigation">
  <ul class="wy-breadcrumbs">
    <li><a href="https://keras.io/ja/">Docs</a> »</li>
    
      
        
          <li>モデル »</li>
        
      
    
    <li>Sequentialモデル</li>
    <li class="wy-breadcrumbs-aside">
      
        
          <a href="https://github.com/keras-team/keras-docs-ja" class="icon icon-github"> Edit on GitHub</a>
        
      
    </li>
  </ul>
  <hr>
</div>
          <div role="main">
            <div class="section">
              
                <h1 id="sequentialapi">SequentialモデルAPI</h1>
<p>はじめに，<a href="https://keras.io/ja/getting-started/sequential-model-guide">KerasのSequentialモデルのガイド</a> を参照してください．</p>
<h2 id="_1">モデルの有用な属性</h2>
<ul>
<li><code>model.layers</code>は，モデルに加えたレイヤーのリストです．</li>
</ul>
<hr>
<h2 id="sequential">Sequentialモデルのメソッド</h2>
<h3 id="compile">compile</h3>
<pre><code class="python hljs">compile(self, optimizer, loss, metrics=<span class="hljs-keyword">None</span>, sample_weight_mode=<span class="hljs-keyword">None</span>, weighted_metrics=<span class="hljs-keyword">None</span>, target_tensors=<span class="hljs-keyword">None</span>)
</code></pre>

<p>訓練過程の設定．</p>
<p><strong>引数</strong></p>
<ul>
<li><strong>optimizer</strong>: 文字列（optimizer名）あるいは optimizer のオブジェクト．
    <a href="https://keras.io/ja/optimizers">optimizers</a> を参照してください．</li>
<li><strong>loss</strong>: 文字列（目的関数名）あるいは目的関数．
    <a href="https://keras.io/ja/losses">losses</a> を参照してください．
    モデルが複数の出力を持つ場合は，オブジェクトの辞書かリストを渡すことで，各出力に異なる損失を用いることができます．
    モデルによって最小化される損失値は全ての個々の損失の合計になります．</li>
<li><strong>metrics</strong>: 訓練やテストの際にモデルを評価するための評価関数のリスト．
    典型的には <code>metrics=['accuracy']</code>を使用するでしょう．
    多出力モデルの各出力のための各評価関数を指定するために，<code>metrics={'output_a': 'accuracy'}</code>のような辞書を渡すこともできます．</li>
<li><strong>sample_weight_mode</strong>: もし時間ごとのサンプルの重み付け（2次元の重み）を行う必要があれば<code>"temporal"</code>と設定してください．
    <code>"None"</code>の場合，サンプルへの（1次元）重み付けをデフォルトとしています．
    モデルに複数の出力がある場合，モードとして辞書かリストを渡すことで，各出力に異なる<code>sample_weight_mode</code>を使うことができます．</li>
<li><strong>weighted_metrics</strong>: 訓練やテストの際にsample_weightまたはclass_weightにより評価と重み付けされるメトリクスのリスト．</li>
<li><strong>target_tensors</strong>: Kerasはデフォルトでモデルのターゲットためのプレースホルダを作成します．
    これは訓練中にターゲットデータが入力されるものです．
    代わりの自分のターゲットテンソルを利用したい場合（訓練時にKerasはこれらのターゲットに対して外部のNumpyデータを必要としません）は，それらを<code>target_tensors</code>引数で指定することができます．
    単一出力の<code>Sequential</code>モデルの場合，これは単一のテンソルでなければなりません．</li>
<li><strong>**kwargs</strong>: Theano/CNTKがバックエンドの場合， これらは K.function に渡されます．
    Tensorflowバックエンドの場合は<code>tf.Session.run</code>に渡されます．</li>
</ul>
<p><strong>Raises</strong></p>
<ul>
<li><strong>ValueError</strong>: <code>optimizer</code>，<code>loss</code>，<code>metrics</code>，または<code>sample_weight_mode</code>に対して無効な引数が与えられた場合．</li>
</ul>
<p><strong>例</strong></p>
<pre><code class="python hljs">model = Sequential()
model.add(Dense(<span class="hljs-number">32</span>, input_shape=(<span class="hljs-number">500</span>,)))
model.add(Dense(<span class="hljs-number">10</span>, activation=<span class="hljs-string">'softmax'</span>))
model.compile(optimizer=<span class="hljs-string">'rmsprop'</span>,
              loss=<span class="hljs-string">'categorical_crossentropy'</span>,
              metrics=[<span class="hljs-string">'accuracy'</span>])
</code></pre>

<hr>
<h3 id="fit">fit</h3>
<pre><code class="python hljs">fit(self, x=<span class="hljs-keyword">None</span>, y=<span class="hljs-keyword">None</span>, batch_size=<span class="hljs-keyword">None</span>, epochs=<span class="hljs-number">1</span>, verbose=<span class="hljs-number">1</span>, callbacks=<span class="hljs-keyword">None</span>, validation_split=<span class="hljs-number">0.0</span>, validation_data=<span class="hljs-keyword">None</span>, shuffle=<span class="hljs-keyword">True</span>, class_weight=<span class="hljs-keyword">None</span>, sample_weight=<span class="hljs-keyword">None</span>, initial_epoch=<span class="hljs-number">0</span>, steps_per_epoch=<span class="hljs-keyword">None</span>, validation_steps=<span class="hljs-keyword">None</span>)
</code></pre>

<p>固定のエポック数でモデルを訓練する．</p>
<p><strong>引数</strong></p>
<ul>
<li><strong>x</strong>: 訓練データのNumpy配列．
    モデルの入力レイヤーに名前がついていれば，入力の名前とNumpy配列をマップした辞書を渡すことも可能です．
    フレームワーク固有のテンソル（例えばTensorFlowデータテンソル）からフィードする場合は<code>x</code>を（デフォルトの）<code>None</code>にすることもできます．</li>
<li><strong>y</strong>: ターゲット（ラベル）データのNumpy配列．
    モデルの出力レイヤーに名前がついていれば，出力の名前とNumpy配列をマップした辞書を渡すことも可能です．
    フレームワーク固有のテンソル（例えばTensorFlowデータテンソル）からフィードする場合は<code>y</code>を（デフォルトの）<code>None</code>にすることもできます．</li>
<li><strong>batch_size</strong>: 整数または<code>None</code>．設定したサンプル数ごとに勾配の更新を行います．
    指定しなければデフォルトで32になります．</li>
<li><strong>epochs</strong>: 整数で，モデルを訓練するエポック数．
    エポックは，提供される<code>x</code>および<code>y</code>データ全体の反復です．
    <code>initial_epoch</code>と組み合わせると，<code>epochs</code>は「最終エポック」として理解されることに注意してください．
    このモデルは<code>epochs</code>で与えられた反復回数の訓練をするわけではなく，単に<code>epochs</code>という指標に試行が達するまで訓練します．</li>
<li><strong>verbose</strong>: 0, 1または2．詳細表示モード．0とすると標準出力にログを出力しません．
    1の場合はログをプログレスバーで標準出力，2の場合はエポックごとに1行のログを出力します．</li>
<li><strong>callbacks</strong>: <code>keras.callbacks.Callback</code> にあるインスタンスのリスト．
    訓練中にcallbacksのリストを適用します．
    <a href="https://keras.io/ja/callbacks">callbacks</a>を参照してください．</li>
<li><strong>validation_split</strong>: 0から1までの浮動小数点数．
    訓練データの中で検証データとして使う割合．
    訓練データの中から検証データとして設定されたデータは，訓練時に使用されず，各エポックの最後に計算される損失関数や何らかのモデルの評価関数で使われます．</li>
<li><strong>validation_data</strong>: 各エポックの損失関数や評価関数で用いられるタプル<code>(x_val, y_val)</code>か<code>(x_val, y_val, val_sample_weights)</code>．
    このデータは訓練には使われません．
    設定すると<code>validation_split</code>を上書きします．</li>
<li><strong>shuffle</strong>: 真理値（各エポックの前に訓練データをシャッフルするか）か文字列('batch')．
    'batch' は HDF5 データだけに使える特別なオプションです．バッチサイズのチャンクの中においてシャッフルします．
    <code>steps_per_epoch</code>が<code>None</code>に設定されている場合は効果がありません．</li>
<li><strong>class_weight</strong>: 辞書で，クラス毎の重みを格納します．
    （訓練の間だけ）損失関数をスケーリングするために使います．
    過小評価されたクラスのサンプルに「より注意を向ける」ようにしたい時に便利です．</li>
<li><strong>sample_weight</strong>: 入力サンプルと同じ長さの1次元のNumpy 配列で，訓練のサンプルに対する重みを格納します．
    これは損失関数をスケーリングするために（訓練の間だけ）使用します．
    （重みとサンプルが1:1対応するように）入力サンプルと同じ長さのフラットな（1次元の）Numpy配列を渡すことができます．
    あるいは系列データの場合において，2次元配列の<code>(samples, sequence_length)</code>という形式で，
    すべてのサンプルの各時間において異なる重みを適用できます．
    この場合，<code>compile()</code>の中で<code>sample_weight_mode="temporal"</code>と確実に明記すべきです．</li>
<li><strong>initial_epoch</strong>: 訓練開始時のepoch（前の学習から再開する際に便利です）．
steps (batches of samples) to validate before stopping.</li>
<li><strong>steps_per_epoch</strong>: 終了した1エポックを宣言して次のエポックを始めるまでのステップ数の合計（サンプルのバッチ）．TensorFlowのデータテンソルのような入力テンソルを使用して訓練する場合，デフォルトの<code>None</code>はデータセットのサンプル数をバッチサイズで割ったものに等しくなります．それが決定できない場合は1になります．</li>
<li><strong>validation_steps</strong>: <code>steps_per_epoch</code>を指定している場合のみ関係します．停止する前にバリデーションするステップの総数（サンプルのバッチ）．</li>
</ul>
<p><strong>戻り値</strong></p>
<p><code>History</code> オブジェクト． <code>History.history</code> 属性は
実行に成功したエポックにおける訓練の損失値と評価関数値の記録と，（適用可能ならば）検証における損失値と評価関数値も記録しています．</p>
<p><strong>Raises</strong></p>
<ul>
<li><strong>RuntimeError</strong>: モデルが1度もcompileされていないとき．</li>
<li><strong>ValueError</strong>: 与えられた入力データがモデルの期待するものとが異なる場合．</li>
</ul>
<hr>
<h3 id="evaluate">evaluate</h3>
<pre><code class="python hljs">evaluate(self, x=<span class="hljs-keyword">None</span>, y=<span class="hljs-keyword">None</span>, batch_size=<span class="hljs-keyword">None</span>, verbose=<span class="hljs-number">1</span>, sample_weight=<span class="hljs-keyword">None</span>, steps=<span class="hljs-keyword">None</span>)
</code></pre>

<p>バッチごとにある入力データにおける損失値を計算します．</p>
<p><strong>引数</strong></p>
<ul>
<li><strong>x</strong>: 入力データ，Numpy 配列あるいは Numpy 配列のリスト
    （モデルに複数の入力がある場合）．
    （TensorFlowのデータテンソルのような）フレームワーク固有のテンソルを与える場合には<code>x</code>をデフォルトの<code>None</code>にすることもできます．</li>
<li><strong>y</strong>: ラベル，Numpy 配列．
    （TensorFlowのデータテンソルのような）フレームワーク固有のテンソルを与える場合には<code>y</code>をデフォルトの<code>None</code>にすることもできます．</li>
<li><strong>batch_size</strong>: 整数．指定しなければデフォルトで32になります．</li>
<li><strong>verbose</strong>: 進行状況メッセージ出力モードで，0か1．</li>
<li><strong>sample_weight</strong>: サンプルの重み，Numpy 配列．</li>
<li><strong>steps</strong>: 整数または<code>None</code>．評価ラウンド終了を宣言するまでの総ステップ数（サンプルのバッチ）．
    デフォルト値の<code>None</code>ならば無視されます．</li>
</ul>
<p><strong>戻り値</strong></p>
<p>スカラーで，テストデータの損失値（モデルの評価関数を設定していない場合）
あるいはスカラーのリスト（モデルが他の評価関数を計算している場合）．
<code>model.metrics_names</code>属性により，スカラーの出力でラベルを表示します．</p>
<p><strong>Raises</strong></p>
<ul>
<li><strong>RuntimeError</strong>: モデルが1度もcompileされていないとき．</li>
</ul>
<hr>
<h3 id="predict">predict</h3>
<pre><code class="python hljs">predict(self, x, batch_size=<span class="hljs-keyword">None</span>, verbose=<span class="hljs-number">0</span>, steps=<span class="hljs-keyword">None</span>)
</code></pre>

<p>入力サンプルに対する予測値の出力を生成します．</p>
<p>入力サンプルごとにバッチごとに処理します．</p>
<p><strong>引数</strong></p>
<ul>
<li><strong>x</strong>: 入力データで，Numpy 配列の形式．</li>
<li><strong>batch_size</strong>: 整数．指定しなければデフォルトで32になります．</li>
<li><strong>verbose</strong>: 進行状況メッセージ出力モード，0または1．</li>
<li><strong>steps</strong>: 評価ラウンド終了を宣言するまでの総ステップ数（サンプルのバッチ）．
    デフォルト値の<code>None</code>ならば無視されます．</li>
</ul>
<p><strong>戻り値</strong></p>
<p>予測値を格納した Numpy 配列．</p>
<hr>
<h3 id="train_on_batch">train_on_batch</h3>
<pre><code class="python hljs">train_on_batch(self, x, y, class_weight=<span class="hljs-keyword">None</span>, sample_weight=<span class="hljs-keyword">None</span>)
</code></pre>

<p>サンプル中の1つのバッチで勾配を更新します．</p>
<p><strong>引数</strong></p>
<ul>
<li><strong>x</strong>: 入力データ，Numpy 配列または Numpy 配列のリスト（モデルに複数の入力がある場合）．</li>
<li><strong>y</strong>: ラベル，Numpy 配列．</li>
<li><strong>class_weight</strong>: 辞書で，クラス毎の重みを格納します．
    （訓練の間だけ）損失関数をスケーリングするために使います．</li>
<li><strong>sample_weight</strong>: サンプルの重み，Numpy 配列．</li>
</ul>
<p><strong>戻り値</strong></p>
<p>スカラーでトレーニングの損失値（モデルに評価関数が設定されていない場合）
あるいはスカラーのリスト（モデルが他の評価関数を計算している場合）．
<code>model.metrics_names</code> 属性により，スカラーの出力でラベルを表示する．</p>
<p><strong>Raises</strong></p>
<ul>
<li><strong>RuntimeError</strong>: モデルが1度もcompileされていないとき．</li>
</ul>
<hr>
<h3 id="test_on_batch">test_on_batch</h3>
<pre><code class="python hljs">test_on_batch(self, x, y, sample_weight=<span class="hljs-keyword">None</span>)
</code></pre>

<p>サンプルの単一バッチにおけるモデルの評価を行います．</p>
<p><strong>引数</strong></p>
<ul>
<li><strong>x</strong>: 入力データ，Numpy 配列または Numpy 配列のリスト（モデルに複数の入力がある場合）．</li>
<li><strong>y</strong>: ラベル，Numpy 配列の形式．</li>
<li><strong>sample_weight</strong>: サンプルの重み，Numpy 配列の形式．</li>
</ul>
<p><strong>戻り値</strong></p>
<p>スカラーで，テストの損失値（モデルに評価関数が設定されていない場合）
あるいはスカラーのリスト（モデルが他の評価関数を計算している場合）．
<code>model.metrics_names</code> 属性により，スカラーの出力でラベルを表示する．</p>
<p><strong>Raises</strong></p>
<ul>
<li><strong>RuntimeError</strong>: モデルが1度もcompileされていないとき．</li>
</ul>
<hr>
<h3 id="predict_on_batch">predict_on_batch</h3>
<pre><code class="python hljs">predict_on_batch(self, x)
</code></pre>

<p>サンプルの単一のバッチに対する予測値を返します．</p>
<p><strong>引数</strong></p>
<ul>
<li><strong>x</strong>: 入力データ，Numpy 配列または Numpy 配列のリスト（モデルに複数の入力がある場合）．</li>
</ul>
<p><strong>戻り値</strong></p>
<p>予測値を格納した Numpy 配列．</p>
<hr>
<h3 id="fit_generator">fit_generator</h3>
<pre><code class="python hljs">fit_generator(self, generator, steps_per_epoch=<span class="hljs-keyword">None</span>, epochs=<span class="hljs-number">1</span>, verbose=<span class="hljs-number">1</span>, callbacks=<span class="hljs-keyword">None</span>, validation_data=<span class="hljs-keyword">None</span>, validation_steps=<span class="hljs-keyword">None</span>, class_weight=<span class="hljs-keyword">None</span>, max_queue_size=<span class="hljs-number">10</span>, workers=<span class="hljs-number">1</span>, use_multiprocessing=<span class="hljs-keyword">False</span>, shuffle=<span class="hljs-keyword">True</span>, initial_epoch=<span class="hljs-number">0</span>)
</code></pre>

<p>Python のジェネレータにより，バッチごとに生成されるデータでモデルを学習させます．</p>
<p>ジェネレータは効率化のために，モデルを並列に実行します．
たとえば，これを使えば CPU 上でリアルタイムに画像データを拡大しながら，それと並行して GPU 上でモデルを学習できます．</p>
<p><strong>引数</strong></p>
<ul>
<li><strong>generator</strong>: ジェネレータ．
    ジェネレータの出力は以下のいずれかでなければならず，どの配列も同数のサンプルを含まなければなりません．<ul>
<li>タプル (inputs, targets)</li>
<li>タプル (inputs, targets, sample_weights)．
全ての配列はサンプル数と同じ個数の値が含まれている必要があります．
ジェネレータは永遠にそのデータを繰り返すことを期待されています．
モデルによって<code>steps_per_epoch</code>のバッチが確認されたときにエポックが終了します．</li>
</ul>
</li>
<li><strong>steps_per_epoch</strong>: 1エポックを宣言してから次のエポックの開始前までに<code>generator</code>から生成されるサンプル (サンプルのバッチ) の総数．
    典型的には，データにおけるユニークなサンプル数をバッチサイズで割った値です．
    <code>Sequence</code>でのオプション：指定されていない場合は，<code>len(generator)</code>をステップ数として使用します．</li>
<li><strong>epochs</strong>: 整数で，イテレーションの総数．<code>initial_epoch</code>と組み合わせると，<code>epochs</code>は「最終エポック」として理解されることに注意してください．
    このモデルは<code>epochs</code>で与えられたnステップの訓練をするわけではなく，epochが<code>epochs</code>に達するまで訓練します．</li>
<li><strong>verbose</strong>: 進行状況メッセージ出力モードで，0，1，あるいは 2．</li>
<li><strong>callbacks</strong>: callbacks のリストで，訓練の際に呼び出されます．</li>
<li><strong>validation_data</strong>: 以下のいずれかです．<ul>
<li>検証用データのジェネレータ</li>
<li>タプル (inputs, targets)</li>
<li>タプル (inputs, targets, sample_weights)．</li>
</ul>
</li>
<li><strong>validation_steps</strong>: <code>validation_data</code> がジェネレータである場合だけ関係があります．
    各エポックの終わりに検証用ジェネレータから使用するステップ数です．典型的には，検証用データにおけるユニークなサンプル数をバッチサイズで割った値です．
    <code>Sequence</code>におけるオプション：指定しなければ<code>len(validation_data)</code>がステップ数として用いられます．</li>
<li><strong>class_weight</strong>: 辞書で，クラス毎の重みを格納します．</li>
<li><strong>max_queue_size</strong>: ジェネレータのキューの最大サイズ．</li>
<li><strong>workers</strong>: スレッドベースのプロセス使用時の最大プロセス数</li>
<li><strong>use_multiprocessing</strong>: Trueならスレッドベースのプロセスを使います．実装がmultiprocessingに依存しているため，子プロセスに簡単に渡すことができないものとしてPickableでない引数をgeneratorに渡すべきではないことに注意してください．</li>
<li><strong>shuffle</strong>: 各試行の初めにバッチの順番をシャッフルするかどうか．<code>Sequence</code> (keras.utils.Sequence)インスタンスの時のみ使用されます．</li>
<li><strong>initial_epoch</strong>: 訓練開始時のepoch（前の学習から再開する際に便利です）．</li>
</ul>
<p><strong>戻り値</strong></p>
<p><code>History</code> オブジェクト．</p>
<p><strong>Raises</strong></p>
<ul>
<li><strong>RuntimeError</strong>: モデルが1度もcompileされていないとき．</li>
</ul>
<p><strong>例</strong></p>
<pre><code class="python hljs"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generate_arrays_from_file</span><span class="hljs-params">(path)</span>:</span>
    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:
        <span class="hljs-keyword">with</span> open(path) <span class="hljs-keyword">as</span> f:
            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:
                <span class="hljs-comment"># create Numpy arrays of input data</span>
                <span class="hljs-comment"># and labels, from each line in the file</span>
                x, y = process_line(line)
                <span class="hljs-keyword">yield</span> (x, y)

model.fit_generator(generate_arrays_from_file(<span class="hljs-string">'/my_file.txt'</span>),
                    steps_per_epoch=<span class="hljs-number">1000</span>, epochs=<span class="hljs-number">10</span>)
</code></pre>

<hr>
<h3 id="evaluate_generator">evaluate_generator</h3>
<pre><code class="python hljs">evaluate_generator(self, generator, steps=<span class="hljs-keyword">None</span>, max_queue_size=<span class="hljs-number">10</span>, workers=<span class="hljs-number">1</span>, use_multiprocessing=<span class="hljs-keyword">False</span>)
</code></pre>

<p>ジェネレータのデータによってモデルを評価します．</p>
<p>ジェネレータは<code>test_on_batch</code>が受け取るデータと同じ種類のデータを返すべきです．</p>
<p><strong>引数</strong></p>
<ul>
<li><strong>generator</strong>:
    (inputs, targets)あるいは(inputs, targets, sample_weights)のタプルを生成するジェネレータ．</li>
<li><strong>steps</strong>: <code>generator</code>が停止するまでに生成するサンプル（サンプルのバッチ）の総数．
    <code>Sequence</code>におけるオプション：指定しなければ<code>len(generator)</code>がステップ数として用いられます．</li>
<li><strong>max_queue_size</strong>: ジェネレータのキューの最大サイズ</li>
<li><strong>workers</strong>: スレッドベースのプロセス使用時の最大プロセス数</li>
<li><strong>use_multiprocessing</strong>: Trueならスレッドベースのプロセスを使います．実装がmultiprocessingに依存しているため，子プロセスに簡単に渡すことができないものとしてPickableでない引数をgeneratorに渡すべきではないことに注意してください．</li>
</ul>
<p><strong>戻り値</strong></p>
<p>スカラーで，テストの損失値（モデルに評価関数が設定されていない場合）
あるいはスカラーのリスト（モデルが他の評価関数を計算している場合）．
<code>model.metrics_names</code>属性により，スカラーの出力でラベルを表示する．</p>
<p><strong>Raises</strong></p>
<ul>
<li><strong>RuntimeError</strong>: モデルが1度もcompileされていないとき．</li>
</ul>
<hr>
<h3 id="predict_generator">predict_generator</h3>
<pre><code class="python hljs">predict_generator(self, generator, steps=<span class="hljs-keyword">None</span>, max_queue_size=<span class="hljs-number">10</span>, workers=<span class="hljs-number">1</span>, use_multiprocessing=<span class="hljs-keyword">False</span>, verbose=<span class="hljs-number">0</span>)
</code></pre>

<p>ジェネレータから生成されたデータに対して予測します．</p>
<p>ジェネレータは<code>predict_on_batch</code>が受け取るデータと同じ種類のデータを返すべきです．</p>
<p><strong>引数</strong></p>
<ul>
<li><strong>generator</strong>:
    入力サンプルのバッチを生成するジェネレータ．</li>
<li><strong>steps</strong>: <code>generator</code>が停止するまでに生成するサンプル（サンプルのバッチ）の総数．
    <code>Sequence</code>におけるオプション：指定しなければ<code>len(generator)</code>がステップ数として用いられます．</li>
<li><strong>max_queue_size</strong>: ジェネレータのキューの最大サイズ</li>
<li><strong>workers</strong>: スレッドベースのプロセス使用時の最大プロセス数</li>
<li><strong>use_multiprocessing</strong>: Trueならスレッドベースのプロセスを使います．実装がmultiprocessingに依存しているため，子プロセスに簡単に渡すことができないものとしてPickableでない引数をgeneratorに渡すべきではないことに注意してください．</li>
<li><strong>verbose</strong>: 進行状況メッセージ出力モード，0または1．</li>
</ul>
<p><strong>戻り値</strong></p>
<p>予測値の Numpy 配列．</p>
<hr>
<h3 id="get_layer">get_layer</h3>
<pre><code class="python hljs">get_layer(self, name=<span class="hljs-keyword">None</span>, index=<span class="hljs-keyword">None</span>)
</code></pre>

<p>モデルの一部分であるレイヤーを探します．</p>
<p>（ユニークな）名前かグラフのインデックスに基づいてレイヤーを返します．インデックスはボトムアップの幅優先探索の順番に基づきます．</p>
<p><strong>引数</strong></p>
<ul>
<li><strong>name</strong>: 文字列，レイヤーの名前．</li>
<li><strong>index</strong>: 整数，レイヤーのインデックス．</li>
</ul>
<p><strong>戻り値</strong></p>
<p>レイヤーインスタンス．</p>
              
            </div>
          </div>
          <footer>
  
    <div class="rst-footer-buttons" role="navigation" aria-label="footer navigation">
      
        <a href="https://keras.io/ja/models/model/" class="btn btn-neutral float-right" title="Modelクラス (functional API)">Next <span class="icon icon-circle-arrow-right"></span></a>
      
      
        <a href="https://keras.io/ja/models/about-keras-models/" class="btn btn-neutral" title="モデルについて"><span class="icon icon-circle-arrow-left"></span> Previous</a>
      
    </div>
  

  <hr>

  <div role="contentinfo">
    <!-- Copyright etc -->
    
  </div>

  Built with <a href="http://www.mkdocs.org/">MkDocs</a> using a <a href="https://github.com/snide/sphinx_rtd_theme">theme</a> provided by <a href="https://readthedocs.org/">Read the Docs</a>.
</footer>
	  
        </div>
      </div>

    </section>

  </div>

<div class="rst-versions" role="note" style="cursor: pointer">
    <span class="rst-current-version" data-toggle="rst-current-version">
      
          <a class="icon icon-github" style="float: left; color: #fcfcfc"> GitHub</a>
      
      
        <span><a href="https://keras.io/ja/models/about-keras-models/" style="color: #fcfcfc;">« Previous</a></span>
      
      
        <span style="margin-left: 15px"><a href="https://keras.io/ja/models/model/" style="color: #fcfcfc">Next »</a></span>
      
    </span>
</div>



</body></html>